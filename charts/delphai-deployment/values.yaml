image:      # delphaiwesteurope.azurecr.io/name@sha256:99257869693daa6a01dcb791309ac16bd1288bd5a096a3451dd6c19e2c5f3efd

# Amount of pods
replicas: 1

# Enable debug mode
debugMode:
  enabled: false
  command:
    - sleep
  args:
    - infinity

# Declare resource usage
resources:
  requests:
    memory: "300Mi"
    cpu: "300m"
  limits:
    memory: "2500Mi"

# Run containainer before main
initContainer:
#   image: debian         # optional, uses main image by default
#   command: ['sh']
#   args: ['-c', 'echo "hello world"']
#   env:
#     FOO: "bar"

scheduling:
  # Allow to use spot machines
  spot: true

  # Define if GPU is `require`s or `prefer`red
  gpu: ""

  # Do not run more than one pod of the same release per node
  maxOneReleasePodPerNode: false

  # Does the service handle requests (including indirect) from people or from public API?
  #
  # Examples for when to set to `true`:
  # - in microservices that are called by the dashboard GUI
  # - in microservices that serve public APIs
  # - in microservices that are called by other microservices that have `scheduling.interactive` set to `true`
  # Examples for when to set to `false`:
  # - in scrapers
  # - in pipelines
  # - in microservices that are only called by the pipelines
  interactive: false

  # (For non-interactive only) Set lower priority (e.g. for scrapers)
  lowPriority: false

  # Enable for scraper services that do a lot of outbound network traffic to scrape websites
  scraper: false

autoscaling:
  minReplicaCount: 1
  maxReplicaCount: 16

  rabbitmq:
    enabled: false

    # The name of the RabbitMQ queue that this service consumes
    queueName: "service.{{ $.Release.Namespace }}"

    # Message backlog length to trigger autoscaling
    value: 100

volumes:
  # Mount Azure File shares from `common` subscription
  commonFileShares:
    # share-name:
    #   enabled: true                          # Optional
    #   mountPath: /mnt/share-name
    #   readOnly: true

# Static environment variables
env:
#  FOO: "bar"

# Import k8s ConfigMaps
configMaps:
#  config-map-name:
#    enabled: true                             # Optional
#    mount: /run/configmaps/parameters         # Optional
#    env:                                      # Optional
#      PARAMETER: key-in-configmap
#    # For init container:
#    initMount: /run/configmaps/parameters     # Optional
#    initEnv:                                  # Optional
#      PARAMETER: key-in-configmap

# Import k8s Secrets
secrets:
#  secret-name:
#    enabled: true                       # Optional
#    mount: /run/secrets/password        # Optional
#    env:                                # Optional
#      PASSWORD: key-in-secret
#    # For init container:
#    initMount: /run/configmaps/parameters     # Optional
#    initEnv:                                  # Optional
#      PARAMETER: key-in-configmap

  mongo-credentials:
    enabled: false
    env:
      MONGO_CONNECTION_STRING: "connection-string"

  rabbitmq-credentials:
    enabled: false
    env:
      RABBITMQ_CONNECTION_STRING: "connection-string"

# Define ports exposed by the deployment (as k8s Service)
ports:
  http:
    enabled: false
    port: 8080

  grpc:
    enabled: false
    port: 8080

  httpgateway:
    enabled: false
    port: 7070

  oauthproxy:
    enabled: false
    port: 37070

monitoring:
  enabled: false
  podMetricsEndpoints:
    - targetPort: 9191
      interval: 30s

# Enable readiness probe
# Will by default probe one of the enabled ports, unless overriden in portName
readinessProbe:
  enabled: true
  # Define probed port explicitly (must not be `oauthproxy`)
  portName: ""

  # Seconds to wait to start probe after main container initialization
  initialDelaySeconds: 0
  # Probe frequency
  periodSeconds: 10
  # Probe timeout (probe failed if response not received in time)
  timeoutSeconds: 1

# Enable Ingress
ingress:
  enabled: false

  # Define subdomain (regex) for HTTP (evaluated as a Helm template)
  subdomain: 'app{{ if eq $.clusterValues.environment "review" }}.*{{ end }}'
  # Define a prefix for HTTP (evaluated as a Helm template)
  urlPrefix: "/service/{{ $.Release.Name }}/"

  # Define a prefix (regex) for optionally exposing public client-facing API
  # Note: The prefix string must start and end with a slash. The trailing slash
  # is treated as optional.
  # publicApiPrefix: "/v1/api/example/"

  # Enable OAuth Proxy for HTTP
  oAuth: false
  oAuthRequireOneOfRoles: []

  # Run Cloudflare purge_cache after deployment
  purgeCloudflareCache: false
  
# CronJobs that execute periodic admin tasks for the service.
#
# Each CronJob sends a HTTP POST request to the service's internal HTTP endpoint
# or executes a custom command.
#
# See https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#schedule-syntax
# or https://crontab.guru/
# for details on the schedule format.
#
# cronjobs:
#   example-http-api-post:
#     schedule: "8 15 * * *"
#     image: delphaiwesteurope.azurecr.io/alpine:3
#     env:
#      - name: REQUEST_PATH
#        value: "/trigger-example-action"
#
#   example-http-api-post-body:
#     schedule: "8 15 * * *"
#     image: delphaiwesteurope.azurecr.io/alpine:3
#     env:
#     - name: REQUEST_PATH
#       value: "/trigger-example-action"
#     # Optionally provide HTTP POST body (otherwise it defaults to empty string)
#     - name: REQUEST_BODY
#       value: |
#         {
#           "source": "cronjob",
#           "message": "Hello, World!"
#         }
#
#   example-custom-api-post:
#     schedule: "8 15 * * *"
#     image: delphaiwesteurope.azurecr.io/alpine:3
#     env:
#     # Optionally override SERVICE_ENDPOINT (otherwise it defaults to the service's internal HTTP endpoint)
#     - name: SERVICE_ENDPOINT
#       value: "https://example.com"
#     - name: REQUEST_PATH
#       value: "/"
#
#   example-python-script:
#     schedule: "8 15 * * *"
#     # A CronJob command can also run a custom script instead of sending an HTTP request.
#     # Note: It can use the service's main container image. The service venv is available.
#     command: ['/app/.venv/bin/python']
#     args:
#     - -c
#     - |
#       print("Hello, World!")
#     # Optionally provide environment variables
#     env:
#     - name: EXAMPLE_VAR
#       value: "42"
#
#   example-custom-command:
#     schedule: "8 15 * * *"
#     image: delphaiwesteurope.azurecr.io/alpine:3
#     command: ['/bin/echo']
#     args:
#     - Hello
#     - World!
#
#   example-runs-on-both-envs:
#     schedule: "8 15 * * *"
#     environments:
#       - review
#       - production
#     image: delphaiwesteurope.azurecr.io/alpine:3
#     env:
#      - name: REQUEST_PATH
#        value: "/trigger-example-action"

redis:
  enabled: false

  image:
    registry: delphaiwesteurope.azurecr.io
    repository: redis

  architecture: standalone

  auth:
    enabled: false

  master:
    ## @param master.disableCommands Array with Redis&reg; commands to disable on master nodes
    ## Commands will be completely disabled by renaming each to an empty string.
    ## ref: https://redis.io/topics/security#disabling-of-specific-commands
    ##
    disableCommands: []

    ## Redis&reg; master resource requests and limits
    ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
    ## @param master.resources.limits The resources limits for the Redis&reg; master containers
    ## @param master.resources.requests The requested resources for the Redis&reg; master containers
    ##
    resources:
      requests:
         cpu: 10m
         memory: 100Mi

    ## @param master.kind Use either Deployment or StatefulSet (default)
    ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/
    kind: Deployment

    ## @param master.tolerations Tolerations for Redis&reg; master pods assignment
    ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
    ##
    tolerations:
      - key: "kubernetes.azure.com/scalesetpriority"
        operator: Equal
        value: "spot"
        effect: NoSchedule

    persistence:
      ## @param master.persistence.enabled Enable persistence on Redis&reg; master nodes using Persistent Volume Claims
      ##
      enabled: false

      ## @param master.persistence.size Persistent Volume size
      ##
      size: 1Gi
