image:      # delphaiwesteurope.azurecr.io/name@sha256:99257869693daa6a01dcb791309ac16bd1288bd5a096a3451dd6c19e2c5f3efd

# Amount of pods
replicas: 1

# Enable debug mode
debugMode:
  enabled: false
  command:
    - sleep
  args:
    - infinity

# Declare resource usage
resources:
  requests:
    memory: 300Mi
    # cpu: 50m
  limits:
    memory: 2500Mi
    # cpu: 100m

# Run containainer before main
initContainer:
#   image: debian         # optional, uses main image by default
#   command: ['sh']
#   args: ['-c', 'echo "hello world"']
#   env:
#     FOO: "bar"

scheduling:
  # Allow to use spot machines
  spot: true

  # Define if GPU is `require`s or `prefer`red
  gpu: ""

  # Do not run more than one pod of the same release per node
  maxOneReleasePodPerNode: false

  # Does the service handle requests (including indirect) from people
  interactive: true
  # (For non-interactive only) Set lower priority (e.g. for scrappers)
  lowPriority: false

volumes:
  # Mount Azure File shares from `common` subscription
  commonFileShares:
    # share-name:
    #   enabled: true                          # Optional
    #   mountPath: /mnt/share-name
    #   readOnly: true

# Static environment variables
env:
#  FOO: "bar"

# Import k8s ConfigMaps
configMaps:
#  config-map-name:
#    enabled: true                             # Optional
#    mount: /run/configmaps/parameters         # Optional
#    env:                                      # Optional
#      PARAMETER: key-in-configmap
#    # For init container:
#    initMount: /run/configmaps/parameters     # Optional
#    initEnv:                                  # Optional
#      PARAMETER: key-in-configmap

# Import k8s Secrets
secrets:
#  secret-name:
#    enabled: true                       # Optional
#    mount: /run/secrets/password        # Optional
#    env:                                # Optional
#      PASSWORD: key-in-secret
#    # For init container:
#    initMount: /run/configmaps/parameters     # Optional
#    initEnv:                                  # Optional
#      PARAMETER: key-in-configmap

  mongo-credentials:
    env:
      MONGO_CONNECTION_STRING: "connection-string"

# Define ports exposed by the deployment (as k8s Service)
ports:
  http:
    enabled: false
    port: 8080

  grpc:
    enabled: false
    port: 8080

  httpgateway:
    enabled: false
    port: 7070

  oauthproxy:
    enabled: false
    port: 37070

# Enable readiness probe
# Will by default probe one of the enabled ports, unless overriden in portName
readinessProbe:
  enabled: true
  # Define probed port explicitly (must not be `oauthproxy`)
  portName: ""

  # Seconds to wait to start probe after main container initialization
  initialDelaySeconds: 0
  # Probe frequency
  periodSeconds: 10
  # Probe timeout (probe failed if response not received in time)
  timeoutSeconds: 1

# Enable Ingress
ingress:
  enabled: false

  # Define subdomain (regex) for HTTP (Helm template)
  subdomain: 'app{{ if eq $.clusterValues.environment "review" }}.*{{ end }}'
  # Define pefix for HTTP (Helm template)
  urlPrefix: "/service/{{ $.Release.Name }}/"

  # Enable OAuth Proxy for HTTP
  oAuth: false
  oAuthRequireOneOfRoles: []

  # Publish GRPC
  grpc: false

  # Run Cloudflare purge_cache after deployment
  purgeCloudflareCache: false

redis:
  enabled: false

  architecture: standalone

  auth:
    enabled: false

  master:
    resources:
      requests:
         cpu: 10m
         memory: 100Mi

    ## @param master.tolerations Tolerations for Redis&reg; master pods assignment
    ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
    ##
    tolerations:
      - key: "kubernetes.azure.com/scalesetpriority"
        operator: Equal
        value: "spot"
        effect: NoSchedule

    persistence:
      ## @param master.persistence.enabled Enable persistence on Redis&reg; master nodes using Persistent Volume Claims
      ##
      enabled: false

      ## @param master.persistence.size Persistent Volume size
      ##
      size: 1Gi
