---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.minReplicas }}
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: {{ .Release.Name }}

  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
      annotations:
        "prometheus.io/port": "9191"
        "prometheus.io/scrape": "true"
    spec:
      tolerations:
        - key: "kubernetes.azure.com/scalesetpriority"
          operator: "Equal"
          value: "spot"
          effect: "NoSchedule"
        {{ if .Values.gpu }}
        - key: "sku"
          operator: "Equal"
          value: "gpu"
          effect: "NoSchedule"
        {{ end }}
      {{ if .Values.gpu }}
      nodeSelector:
        node_type: "gpu"
      {{ end }}
      {{ if .Values.podAntiAffinity }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - {{ .Release.Name }}
            topologyKey: "kubernetes.io/hostname"
      {{ end }}
      imagePullSecrets:
        - name: acr-credentials
      automountServiceAccountToken: true
      volumes:
        {{ if ne ( len .Values.fileShares) 0 }}
          {{- range $fileShare := .Values.fileShares }}
        - name: {{ $fileShare }}
          azureFile:
            secretName: azure-storage-common
            shareName: {{ $fileShare }}
            readOnly: true
          {{- end }}
        {{ end }}
      containers:
        - image: {{ .Values.image }}
          resources:
{{ toYaml $.Values.resources | indent 12 }}
          imagePullPolicy: Always
          name: {{ .Release.Name }}
          volumeMounts:
          {{ if ne ( len .Values.fileShares) 0 }}
            {{- range $fileShare := .Values.fileShares }}
            - name: {{ $fileShare }}
              mountPath: /app/data/{{ $fileShare }}
            {{- end }}
          {{ end }}
          env:
            - name: DELPHAI_ENVIRONMENT
              value: {{ .Values.delphaiEnvironment }}
            {{- range .Values.env }}
            - name: {{ .name }}
              value: {{ .value }}
            {{- end }}
            {{ if .Values.gpu }}
            - name: NVIDIA_VISIBLE_DEVICES
              value: "all"
            - name: NVIDIA_DRIVER_CAPABILITIES
              value: "compute,utility"
            {{ end }}

          ports:
            - name: http
              containerPort: {{ .Values.http.port }}
            - name: h2c
              containerPort: {{ .Values.grpc.port }}

        {{ if and .Values.http.enabled .Values.http.public .Values.http.publicWithOAuth }}
        - name: oauth2-proxy
          image: "quay.io/oauth2-proxy/oauth2-proxy:v7.2.0"
          args:
            - "--email-domain=*"
            {{- range $role := .Values.http.oAuthRequireOneOfRoles }}
            - "--allowed-role={{ $role }}"
            {{- end }}
          env:
          - name: OAUTH2_PROXY_HTTP_ADDRESS
            value: 0.0.0.0:{{ .Values.http.oAuthProxyPort }}

          - name: OAUTH2_PROXY_PROVIDER
            value: "keycloak-oidc"

          - name: OAUTH2_PROXY_PROVIDER_DISPLAY_NAME
            value: "Keycloak"

          - name: OAUTH2_PROXY_OIDC_ISSUER_URL
            valueFrom:
              secretKeyRef:
                name: oauth2-proxy
                key: oidc-issuer-url

          - name: OAUTH2_PROXY_CLIENT_ID
            valueFrom:
              secretKeyRef:
                name: oauth2-proxy
                key: client-id

          - name: OAUTH2_PROXY_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: oauth2-proxy
                key: client-secret

          - name: OAUTH2_PROXY_SCOPE
            valueFrom:
              secretKeyRef:
                name: oauth2-proxy
                key: scope

          - name: OAUTH2_PROXY_COOKIE_SECRET
            valueFrom:
              secretKeyRef:
                name: oauth2-proxy
                key: cookie-secret

          - name: OAUTH2_PROXY_SKIP_AUTH_ROUTES
            value: "^/favicon\\.ico$"

          - name: OAUTH2_PROXY_UPSTREAMS
            value: "http://127.0.0.1:{{ .Values.http.port }}"

          ports:
            - containerPort: {{ .Values.http.oAuthProxyPort }}
              name: http

          livenessProbe:
            httpGet:
              path: /ping
              port: http
              scheme: HTTP
            timeoutSeconds: 10

          resources:
            limits:
              cpu: 10m
              memory: 30Mi
        {{ end }}
